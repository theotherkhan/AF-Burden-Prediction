{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import sys\n",
    "\n",
    "import wfdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Package             Version\r\n",
      "------------------- ---------\r\n",
      "appnope             0.1.2\r\n",
      "argon2-cffi         21.1.0\r\n",
      "attrs               21.2.0\r\n",
      "backcall            0.2.0\r\n",
      "bleach              4.1.0\r\n",
      "certifi             2021.10.8\r\n",
      "cffi                1.15.0\r\n",
      "charset-normalizer  2.0.7\r\n",
      "cycler              0.11.0\r\n",
      "debugpy             1.4.1\r\n",
      "decorator           5.1.0\r\n",
      "defusedxml          0.7.1\r\n",
      "entrypoints         0.3\r\n",
      "idna                3.3\r\n",
      "importlib-resources 5.4.0\r\n",
      "ipykernel           6.4.1\r\n",
      "ipython             7.29.0\r\n",
      "ipython-genutils    0.2.0\r\n",
      "ipywidgets          7.6.5\r\n",
      "jedi                0.18.0\r\n",
      "Jinja2              3.0.3\r\n",
      "jsonschema          4.2.1\r\n",
      "jupyter             1.0.0\r\n",
      "jupyter-client      7.0.1\r\n",
      "jupyter-console     6.4.0\r\n",
      "jupyter-core        4.9.1\r\n",
      "jupyterlab-pygments 0.1.2\r\n",
      "jupyterlab-widgets  1.0.2\r\n",
      "kiwisolver          1.3.2\r\n",
      "MarkupSafe          2.0.1\r\n",
      "matplotlib          3.4.3\r\n",
      "matplotlib-inline   0.1.2\r\n",
      "mistune             0.8.4\r\n",
      "nbclient            0.5.8\r\n",
      "nbconvert           6.3.0\r\n",
      "nbformat            5.1.3\r\n",
      "nest-asyncio        1.5.1\r\n",
      "notebook            6.4.5\r\n",
      "numpy               1.21.4\r\n",
      "packaging           21.2\r\n",
      "pandas              1.3.4\r\n",
      "pandocfilters       1.5.0\r\n",
      "parso               0.8.2\r\n",
      "pexpect             4.8.0\r\n",
      "pickleshare         0.7.5\r\n",
      "Pillow              8.4.0\r\n",
      "pip                 21.2.4\r\n",
      "prometheus-client   0.12.0\r\n",
      "prompt-toolkit      3.0.20\r\n",
      "ptyprocess          0.7.0\r\n",
      "pycparser           2.21\r\n",
      "Pygments            2.10.0\r\n",
      "pyparsing           2.4.7\r\n",
      "pyrsistent          0.18.0\r\n",
      "python-dateutil     2.8.2\r\n",
      "pytz                2021.3\r\n",
      "pyzmq               22.2.1\r\n",
      "qtconsole           5.2.0\r\n",
      "QtPy                1.11.2\r\n",
      "requests            2.26.0\r\n",
      "scipy               1.7.2\r\n",
      "Send2Trash          1.8.0\r\n",
      "setuptools          58.0.4\r\n",
      "six                 1.16.0\r\n",
      "terminado           0.12.1\r\n",
      "testpath            0.5.0\r\n",
      "tornado             6.1\r\n",
      "traitlets           5.1.0\r\n",
      "urllib3             1.26.7\r\n",
      "wcwidth             0.2.5\r\n",
      "webencodings        0.5.1\r\n",
      "wfdb                3.4.1\r\n",
      "wheel               0.37.0\r\n",
      "widgetsnbextension  3.5.2\r\n",
      "zipp                3.6.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    DATA_PATH = sys.argv[1]\n",
    "    RESULT_PATH = sys.argv[2]\n",
    "    if not os.path.exists(RESULT_PATH):\n",
    "        os.makedirs(RESULT_PATH)\n",
    "        \n",
    "    test_set = open(os.path.join(DATA_PATH, 'RECORDS'), 'r').read().splitlines()\n",
    "    for i, sample in enumerate(test_set):\n",
    "        print(sample)\n",
    "        sample_path = os.path.join(DATA_PATH, sample)\n",
    "        pred_dict = challenge_entry(sample_path)\n",
    "\n",
    "        save_dict(os.path.join(RESULT_PATH, sample+'.json'), pred_dict)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_0_1.atr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_data(sample_path):\n",
    "    sig, fields = wfdb.rdsamp(sample_path)\n",
    "    length = len(sig)\n",
    "    fs = fields['fs']\n",
    "\n",
    "    return sig, length, fs\n",
    "\n",
    "def ngrams_rr(data, length):\n",
    "    grams = []\n",
    "    for i in range(0, length-12, 12):\n",
    "        grams.append(data[i: i+12])\n",
    "    return grams"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def challenge_entry(sample_path):\n",
    "    \"\"\"\n",
    "    This is a baseline method.\n",
    "    \"\"\"\n",
    "\n",
    "    sig, _, fs = load_data(sample_path)\n",
    "    sig = sig[:, 1]\n",
    "    end_points = []\n",
    "\n",
    "    r_peaks = qrs_detect(sig, fs=200)\n",
    "    print(r_peaks)\n",
    "    rr_seq = np.diff(r_peaks) / fs\n",
    "    len_rr = len(rr_seq)\n",
    "\n",
    "    rr_seq_slice = ngrams_rr(rr_seq, len_rr)\n",
    "    is_af = []\n",
    "    for rr_period in rr_seq_slice:\n",
    "        cos_en, _ = comp_cosEn(rr_period)\n",
    "        if cos_en <= -1.4:\n",
    "            is_af.append(0)\n",
    "        else:\n",
    "            is_af.append(1)\n",
    "    is_af = np.array([[j] * 12 for j in is_af]).flatten()\n",
    "    rr_seq_last = rr_seq[-12: ]\n",
    "    cos_en, _ = comp_cosEn(rr_seq_last)\n",
    "    if cos_en <= -1.4:\n",
    "        is_af_last = 0\n",
    "    else:\n",
    "        is_af_last = 1\n",
    "    \n",
    "    len_rr_remain = len_rr - int(12*len(rr_seq_slice))\n",
    "    is_af = np.concatenate((is_af, np.array([is_af_last] * len_rr_remain).flatten()), axis=0)\n",
    "\n",
    "    if np.sum(is_af) == len(is_af):\n",
    "        end_points.append([0, len(sig)-1])\n",
    "    elif np.sum(is_af) != 0:\n",
    "        state_diff = np.diff(is_af)\n",
    "        start_r = np.where(state_diff==1)[0] + 1\n",
    "        end_r = np.where(state_diff==-1)[0] + 1\n",
    "\n",
    "        if is_af[0] == 1:\n",
    "            start_r = np.insert(start_r, 0, 0)\n",
    "        if is_af[-1] == 1:\n",
    "            end_r = np.insert(end_r, len(end_r), len(is_af)-1)\n",
    "        start_r = np.expand_dims(start_r, -1)\n",
    "        end_r = np.expand_dims(end_r, -1)\n",
    "        start_end = np.concatenate((r_peaks[start_r], r_peaks[end_r]), axis=-1).tolist()\n",
    "        end_points.extend(start_end)\n",
    "        \n",
    "    pred_dcit = {'predict_endpoints': end_points}\n",
    "    \n",
    "    return pred_dcit"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
